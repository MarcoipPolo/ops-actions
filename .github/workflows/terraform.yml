name: â™» terraform

on:
  workflow_call:
    inputs:
      environment:
        description: The environment that the job references.
        type: string
        required: true

      working_directory:
        description: The working directory to run the Terraform commands in.
        type: string
        required: false
        default: "."

      terraform_version:
        description: The version of Terraform to install.
        type: string
        required: false
        default: ~1.5.0

      backend_config:
        description: The path, relative to the working directory, of a configuration file containing the remaining arguments for a partial backend configuration.
        type: string
        required: true
        # Ref: https://developer.hashicorp.com/terraform/language/settings/backends/configuration#partial-configuration

      artifact_name:
        description: The name of the artifact to upload.
        type: string
        required: false
        default: terraform

    secrets:
      AZURE_CLIENT_ID:
        description: The client ID of the Azure AD service principal to use for authenticating to Azure.
        required: true

      AZURE_SUBSCRIPTION_ID:
        description: The ID of the Azure subscription to create the resources in.
        required: true

      AZURE_TENANT_ID:
        description: The ID of the Azure tenant to create the resources in.
        required: true

      ENCRYPTION_PASSWORD:
        description: A password used to encrypt the archive containing the Terraform configuration and plan file.
        required: true

# Queue jobs that target the same Terraform configuration.
concurrency:
  group: terraform @ ${{ inputs.working_directory }}
  cancel-in-progress: false

# Set permissions required to login to Azure using OIDC.
permissions:
  id-token: write
  contents: read

env:
  # Ensure use of open-source Terraform versions.
  # (versions 1.6.0 and above are source-available)
  TERRAFORM_VERSION: "${{ inputs.terraform_version }} <1.6.0"

  # Configure Terraform to run in automation.
  # Makes output more consistent and less confusing in workflows where users don't directly execute Terraform commands.
  TF_IN_AUTOMATION: true

  TF_CLI_ARGS_init: -backend-config=${{ inputs.backend_config }}

  # Configure OIDC authentication to Azure using environment variables.
  # Required by the AzureRM backend and provider.
  ARM_USE_OIDC: true
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

  BACKEND_CONFIG: ${{ inputs.backend_config }}

  PRE_FLIGHT_SCRIPT: |
    RESOURCE_GROUP=$(jq -r .resource_group_name ${{ inputs.backend_config }})
    ACCOUNT_NAME=$(jq -r .storage_account_name ${{ inputs.backend_config }})
    IP_ADDRESS=$(curl https://api.ipify.org)

    echo "IP address: $IP_ADDRESS"

    # Make environment variables available to other steps and jobs.
    # It's important that this is done before trying to update the Storage account network rules,
    # as these variables will be used by the job that reverts this change if an error occurs.
    {
      echo "RESOURCE_GROUP=$RESOURCE_GROUP" >> "$GITHUB_ENV"
      echo "ACCOUNT_NAME=$ACCOUNT_NAME" >> "$GITHUB_ENV"
      echo "IP_ADDRESS=$IP_ADDRESS" >> "$GITHUB_ENV"
    } >> "$GITHUB_ENV"

    az storage account network-rule add --resource-group "$RESOURCE_GROUP" --account-name "$ACCOUNT_NAME" --ip-address "$IP_ADDRESS" --output none

  POST_FLIGHT_SCRIPT: az storage account network-rule remove --resource-group "$RESOURCE_GROUP" --account-name "$ACCOUNT_NAME" --ip-address "$IP_ADDRESS" --output none

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working_directory }}

    outputs:
      upload-outcome: ${{ steps.upload.outcome }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: true # Makes Terraform commands stdout and exitcode available in step outputs

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      # Required for Azure CLI commands
      - name: Login to Azure
        uses: Azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}

      - name: Run pre-flight script
        run: ${{ env.PRE_FLIGHT_SCRIPT }}

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      # Create Terraform plan file.
      # This file contains the full configuration, including sensitive data.
      # As a result, it should be treated as a potentially-sensitive artifact.
      # Ref: https://developer.hashicorp.com/terraform/tutorials/automation/automate-terraform#plan-and-apply-on-different-machines
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -out=tfplan -detailed-exitcode

      - name: Run post-flight script
        if: always()
        run: ${{ env.POST_FLIGHT_SCRIPT }}

      # The stdout of the plan step must not be set in an intermediate environment variable.
      # Long environment variables will cause Bash to throw an error "Argument list too long" on startup.
      - name: Create job summary
        if: success() || failure()
        env:
          WORKING_DIRECTORY: ${{ inputs.working_directory }}
        run: |
          tfplan='${{ steps.plan.outputs.stdout }}'

          echo "#### Terraform Format and Style ðŸ–Œ\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization âš™\`${{ steps.init.outcome }}\`
          #### Terraform Validation ðŸ¤–\`${{ steps.validate.outcome }}\`
          #### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`terraform
          $tfplan
          \`\`\`

          </details>

          *Pusher: @$GITHUB_ACTOR, Action: \`$GITHUB_EVENT_NAME\`, Working Directory: \`$WORKING_DIRECTORY\`, Workflow: \`$GITHUB_WORKFLOW\`*" >> "$GITHUB_STEP_SUMMARY"

      - name: Archive Terraform config
        id: archive
        # Only run if Terraform Plan succeeded with non-empty diff (changes present).
        # Ref: https://developer.hashicorp.com/terraform/cli/commands/plan#detailed-exitcode
        if: steps.plan.outputs.exitcode == 2
        run: |
          tar -cf terraform.tar .
          7z a -p"$ENCRYPTION_PASSWORD" terraform.tar.7z terraform.tar

      - name: Upload artifact
        id: upload
        if: steps.archive.outcome == 'success'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.artifact_name }}
          path: ${{ inputs.working_directory }}/terraform.tar.7z
          if-no-files-found: error
          # Automatically delete artifact after the workflow run time limit (35 days) to save storage space.
          # If a workflow reaches this limit, it will be cancelled and the artifact will no longer be needed.
          # Ref: https://docs.github.com/en/actions/learn-github-actions/usage-limits-billing-and-administration#usage-limits
          retention-days: 35

  terraform-apply:
    name: Terraform Apply
    needs: terraform-plan
    if: needs.terraform-plan.outputs.upload-outcome == 'success'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working_directory }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.artifact_name }}
          path: ${{ inputs.working_directory }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Extract Terraform config
        run: |
          7z x -p"$ENCRYPTION_PASSWORD" terraform.tar.7z
          tar -xf terraform.tar

      # Required for Azure CLI commands
      - name: Login to Azure
        uses: Azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}

      - name: Run pre-flight script
        run: ${{ env.PRE_FLIGHT_SCRIPT }}

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false tfplan

      - name: Run post-flight script
        if: always()
        run: ${{ env.POST_FLIGHT_SCRIPT }}

      # Once the Terraform plan file has been applied, the artifact is no longer needed.
      # Delete it to save storage space.
      - name: Delete artifact
        uses: GeekyEggo/delete-artifact@54ab544f12cdb7b71613a16a2b5a37a9ade990af
        with:
          name: ${{ inputs.artifact_name }}
